@page "/product"
@using System.Globalization
@inject IProductRepository _productRepository
@inject IJSRuntime _IJSRuntime

<BsModal OnModalConfirmation="ConfirmDelete_Click"
    ButtonBootstrapStyle="btn-danger"
    ButtonText="Delete"
    Title="Are you sure you want to delete this Product?"
></BsModal>

@if(IsProcessing)
{
   <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
       <img src="/images/loading.gif" />
   </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/product/create" class="btn btn-sm btn-secondary" style="width:200px;">Add New Product</a>
                </div>
            </div>
            @if(Products.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Special Tag</th>
                            <th>Cateogory</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var obj in Products)
                        {
                            <tr>
                                <td>@obj.Name</td>
                                <td>@obj.Price.ToString("C", CultureInfo.GetCultureInfo("en-us")) </td>
                                <td> <span class="badge text-bg-info"> @obj.SpecialTag </span> </td>
                                <td> @obj.Category.Name </td>
                                <td>
                                    <a href="@($"/product/update/{@obj.Id}")" class="btn btn-sm btn-secondary" style="width:100px;"><i class="bi bi-pencil"></i> Edit </a>
                                    <button @onclick="()=>HandleDelete(obj.Id)" class="btn btn-sm btn-danger"><i class="bi bi-trash"></i> Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    public bool IsProcessing {get; set; } = true;

    private IEnumerable<Product> Products { get; set; } = new List<Product>();

    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _IJSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _IJSRuntime.InvokeVoidAsync("HideConfirmationModal");
        if(isConfirmed)
        {
            var result = await _productRepository.DeleteProductAsync(DeleteProductId);
            if(result)
            {

                await _IJSRuntime.ToastrSuccess("Product Deleted Successfully");
            }
            else
            {
                await _IJSRuntime.ToastrError("Product Deletion Failed");            
            }
            await LoadProducts();
        }
        IsProcessing = false;
        DeleteProductId = 0;
    }
}