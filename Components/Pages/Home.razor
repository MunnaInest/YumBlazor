@page "/"
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IProductRepository _productRepository;
@inject ICategoryRepository _categoryRepository;
@inject IShoppingCartRepository _shoppingCartRepository;
@inject SharedStateService _sharedStateService;

<PageTitle>Home</PageTitle>

<div class="text-center">
    <input type="text" class="form-control rounded-pill" @bind:event="oninput" @bind:get="_searchText" @bind:set="FilterProducdtByName" id="txtSearch" />
</div>


@if(IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" />
    </div>
}
else
{
    <RadzenButton Click="@ButtonClicked" Text="Hi"></RadzenButton>
    @code {
    void ButtonClicked()
    {
        // Handle the Click event of RadzenButton
    }
}

    <ul class="nav nav-underline justify-content-center mb-2">
        <li class="nav-item">
            <span class="nav-link @GetActiveTabClass(0)" href="#" @onclick="()=>FilterProducts(0)" style="cursor:pointer">All</span>
        </li>
        @foreach(var cat in Categories)
        {
            <li class="nav-item">
                <span class="nav-link @GetActiveTabClass(cat.Id)" @onclick="() => FilterProducts(cat.Id)" href="#" style="cursor:pointer">@cat.Name</span>
            </li>
        }
    </ul>

    @foreach (var prod in FilteredProducts)
    {
        <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
            <div class="card">
                <div class="mt-3 mb-2 row">
                    <div class="col-6 px-3">
                        @if(!string.IsNullOrEmpty(prod.SpecialTag))
                        {
                            <i class="bi bi-star btn btn-outline-success disabled">@prod.SpecialTag</i>
                        }
                    </div>
                    <div class="col-6 text-end text-danger px-3 h3">
                        @prod.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                    </div>
                </div>
                <div class="text-center">
                    @if (!string.IsNullOrEmpty(prod.ImageUrl))
                    {
                        <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@prod.ImageUrl" style="" />
                    }
                </div>
                <div class="card-body">
                    <h5 class="card-title text-center lead text-success">@prod.Name</h5>
                    <p class="card-text mt-2">@((MarkupString)(prod.Description))</p>

                    <h4 class="text-center">
                        <a class="m-lg-auto p-2" @onclick="()=>AddOrderItem(prod)">
                            <i class="bi bi-cart3 text-white btn btn-success text-primary px-5 form-control">Add to cart</i>
                        </a>
                    </h4>
                </div>
            </div>
        </div>
    }
}

@code
{
    private IEnumerable<Product> Products=new List<Product>();
    private IEnumerable<Category> Categories=new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();

    private bool IsProcessing { get; set; } = true;
    private int _selectedCategoryId = 0;
    private string _searchText = "";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
        Categories = await _categoryRepository.GetAllAsync();
        FilterProducts(0);
    }

    private void FilterProducts(int CategoryId)
    {
        if(CategoryId==0)
        {
            FilteredProducts = Products;
            _selectedCategoryId = CategoryId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(u => u.CategoryId == CategoryId).ToList();
            _selectedCategoryId = CategoryId;
            _searchText = string.Empty;
        }
    }

    private void FilterProducdtByName(string newValueOfSearchText)
    {
        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products
            .Where(u => u.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();

        }_searchText = newValueOfSearchText;
    }

    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product product)
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        if (!authenticated)
        {
            _navigationManager.NavigateTo("account/login");
        }
        else
        {
            var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            var result = await _shoppingCartRepository.UpdateCartAsync(userId, product.Id, 1);
            _sharedStateService.TotalCartCount = await _shoppingCartRepository.GetTotalCartCountAsync(userId);
            if(result)
            {
                _jsRuntime?.ToastrSuccess("Product added to cart successfully");
            }
            else
            {
                _jsRuntime?.ToastrError("Failed to add product to cart");
            }
        }
    }
}