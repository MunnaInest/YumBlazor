@page "/cart"
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject IShoppingCartRepository _cartRepository
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@inject SharedStateService _sharedStateService
@attribute [Authorize]

<h3>Cart</h3>

@if(IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" />
    </div>
}
else
{
    @if (ShoppingCarts.Any()) { 
        <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

            <div class="row p-2 my-3">
                <div class="col-12 col-lg-7 p-4">
                    <div class="row px-2 text-success ">
                        <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                        <div class="col-4 p-0" style="text-align:right">
                            <a href="" class="btn btn-secondary btn-block">Back to cart</a>
                        </div>
                    </div>





                    @foreach(var cart in ShoppingCarts) {
                        <div class="row border p-1 m-1">

                            <div class="col-3 col-md-2 ">
                                <img src="@cart.Product.ImageUrl" width="100%" />
                            </div>
                            <div class="col-5 col-md-5 ">
                                <span class="">Product : @cart.Product.Name </span><br />
                                <span class="pt-1">Price : @cart.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))</span><br />

                                <span @onclick="()=>UpdateCartItem(cart.Product.Id,-1)" class="btn btn-warning btn-sm">-</span>

                                <span class="pt-1">Count : @cart.Count</span><br />
                                <span @onclick="()=>UpdateCartItem(cart.Product.Id,1)" class="btn btn-warning btn-sm">+</span>

                            </div>
                            <div class="col-4 col-md-5 " style="text-align:right;">
                                <h4 class="text-warning font-weight-bold pt-2">
                                    USD
                                    <span style="border-bottom:1px solid #ff6a00">
                                        @Convert.ToDecimal(cart.Count * cart.Product.Price).ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </span>
                                </h4>
                            </div>

                            <button class="btn btn-danger" @onclick="()=>UpdateCartItem(cart.Product.Id,-10000)">Remove</button>

                        </div>
                    }


                </div>
                <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                    <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">

                        <DataAnnotationsValidator></DataAnnotationsValidator>

                        <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>

                        <div class="form-group pt-2">
                            <label class="text-warning">Name</label>
                            <InputText @bind-Value="OrderHeader.Name" class="form-control" />
                            <ValidationMessage For="@(()=> OrderHeader.Name)"></ValidationMessage>
                        </div>
                        <div class="form-group pt-2">
                            <label class="text-warning">Phone</label>
                            <InputText @bind-Value="OrderHeader.PhoneNumber" class="form-control" />
                            <ValidationMessage For="@(()=> OrderHeader.PhoneNumber)"></ValidationMessage>
                        </div>
                        <div class="form-group pt-2">
                            <label class="text-warning">Email</label>
                            <InputText @bind-Value="OrderHeader.Email" class="form-control" />
                            <ValidationMessage For="@(()=> OrderHeader.Email)"></ValidationMessage>
                        </div>

                        <div class="form-group pt-2">
                            <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                        </div>

                    </div>


                    <div class="row" style="text-align:right">
                        <div class="col-12 px-3">
                            <h3> Grand Total : <span class="text-secondary">@OrderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))</span> </h3>
                            <h3> Total Items : <span class="text-secondary">@TotalItems</span> </h3>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-success m-4">
                        Looks Good? Proceed to Checkout
                    </button>
                </EditForm>
            </div>
        </div>

    }
    else
    {
        <div class="text-center">
            <h3>Your cart is empty</h3>
            <a href="/" class="btn btn-primary">Continue Shopping</a>
        </div>

    }
}

@code {
    private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();

    private bool IsProcessing { get; set; } = true; 

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();
    private int TotalItems { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        OrderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        OrderHeader.UserId= user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        OrderHeader.Status = SD.StatusPending;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCarts();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadCarts()
    {
        ShoppingCarts = await _cartRepository.GetAllAsync(OrderHeader.UserId);

        OrderHeader.OrderTotal = Math.Round(ShoppingCarts.Sum(c => c.Count * Convert.ToDouble(c.Product.Price)), 2);
        TotalItems = ShoppingCarts.Sum(c => c.Count);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsProcessing = true;
        await _cartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, productId, updateBy);
        _sharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCountAsync(OrderHeader.UserId);
        await LoadCarts();
        IsProcessing = false;
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing=true;
        await Task.Yield();

        OrderHeader.OrderDetails = SD.ConvertShoppingCartListToOrderDetail(ShoppingCarts.ToList());
        await _orderRepository.CreateAsync(OrderHeader);
        _navigationManager.NavigateTo($"/order/confirmation/{OrderHeader.Id}");

        // OrderHeader.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        // OrderHeader.OrderDetails = new List<OrderDetail>();

        // foreach (var cart in ShoppingCarts)
        // {
        //     OrderHeader.OrderDetails.Add(new OrderDetail
        //     {
        //         ProductId = cart.Product.Id,
        //         Count = cart.Count,
        //         Price = Convert.ToDouble(cart.Product.Price)
        //     });
        // }

        // await _cartRepository.CreateOrderAsync(OrderHeader);
        // _navigationManager.NavigateTo("/order/list");
    }
}
